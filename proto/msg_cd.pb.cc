// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_cd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_cd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* KeepLiveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepLiveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepLiveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepLiveResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fcd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_5fcd_2eproto() {
  protobuf_AddDesc_msg_5fcd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_cd.proto");
  GOOGLE_CHECK(file != NULL);
  KeepLiveRequest_descriptor_ = file->message_type(0);
  static const int KeepLiveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepLiveRequest, head_),
  };
  KeepLiveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepLiveRequest_descriptor_,
      KeepLiveRequest::default_instance_,
      KeepLiveRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeepLiveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepLiveRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepLiveRequest, _is_default_instance_));
  KeepLiveResponse_descriptor_ = file->message_type(1);
  static const int KeepLiveResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepLiveResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepLiveResponse, timestump_),
  };
  KeepLiveResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepLiveResponse_descriptor_,
      KeepLiveResponse::default_instance_,
      KeepLiveResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeepLiveResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepLiveResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepLiveResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fcd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepLiveRequest_descriptor_, &KeepLiveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepLiveResponse_descriptor_, &KeepLiveResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fcd_2eproto() {
  delete KeepLiveRequest::default_instance_;
  delete KeepLiveRequest_reflection_;
  delete KeepLiveResponse::default_instance_;
  delete KeepLiveResponse_reflection_;
}

void protobuf_AddDesc_msg_5fcd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_5fcd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_msg_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014msg_cd.proto\032\rmsg_def.proto\")\n\017KeepLiv"
    "eRequest\022\026\n\004head\030\001 \001(\0132\010.ReqHead\">\n\020Keep"
    "LiveResponse\022\027\n\004head\030\001 \001(\0132\t.RespHead\022\021\n"
    "\ttimestump\030\002 \001(\rb\006proto3", 144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_cd.proto", &protobuf_RegisterTypes);
  KeepLiveRequest::default_instance_ = new KeepLiveRequest();
  KeepLiveResponse::default_instance_ = new KeepLiveResponse();
  KeepLiveRequest::default_instance_->InitAsDefaultInstance();
  KeepLiveResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fcd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fcd_2eproto {
  StaticDescriptorInitializer_msg_5fcd_2eproto() {
    protobuf_AddDesc_msg_5fcd_2eproto();
  }
} static_descriptor_initializer_msg_5fcd_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepLiveRequest::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepLiveRequest::KeepLiveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KeepLiveRequest)
}

void KeepLiveRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::ReqHead*>(&::ReqHead::default_instance());
}

KeepLiveRequest::KeepLiveRequest(const KeepLiveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KeepLiveRequest)
}

void KeepLiveRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  head_ = NULL;
}

KeepLiveRequest::~KeepLiveRequest() {
  // @@protoc_insertion_point(destructor:KeepLiveRequest)
  SharedDtor();
}

void KeepLiveRequest::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void KeepLiveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepLiveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepLiveRequest_descriptor_;
}

const KeepLiveRequest& KeepLiveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fcd_2eproto();
  return *default_instance_;
}

KeepLiveRequest* KeepLiveRequest::default_instance_ = NULL;

KeepLiveRequest* KeepLiveRequest::New(::google::protobuf::Arena* arena) const {
  KeepLiveRequest* n = new KeepLiveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepLiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KeepLiveRequest)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}

bool KeepLiveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KeepLiveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ReqHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KeepLiveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KeepLiveRequest)
  return false;
#undef DO_
}

void KeepLiveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KeepLiveRequest)
  // optional .ReqHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // @@protoc_insertion_point(serialize_end:KeepLiveRequest)
}

::google::protobuf::uint8* KeepLiveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeepLiveRequest)
  // optional .ReqHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KeepLiveRequest)
  return target;
}

int KeepLiveRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KeepLiveRequest)
  int total_size = 0;

  // optional .ReqHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepLiveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KeepLiveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeepLiveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepLiveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KeepLiveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KeepLiveRequest)
    MergeFrom(*source);
  }
}

void KeepLiveRequest::MergeFrom(const KeepLiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KeepLiveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_head()) {
    mutable_head()->::ReqHead::MergeFrom(from.head());
  }
}

void KeepLiveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KeepLiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepLiveRequest::CopyFrom(const KeepLiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeepLiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepLiveRequest::IsInitialized() const {

  return true;
}

void KeepLiveRequest::Swap(KeepLiveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepLiveRequest::InternalSwap(KeepLiveRequest* other) {
  std::swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepLiveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepLiveRequest_descriptor_;
  metadata.reflection = KeepLiveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepLiveRequest

// optional .ReqHead head = 1;
bool KeepLiveRequest::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void KeepLiveRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::ReqHead& KeepLiveRequest::head() const {
  // @@protoc_insertion_point(field_get:KeepLiveRequest.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ReqHead* KeepLiveRequest::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ReqHead;
  }
  // @@protoc_insertion_point(field_mutable:KeepLiveRequest.head)
  return head_;
}
::ReqHead* KeepLiveRequest::release_head() {
  // @@protoc_insertion_point(field_release:KeepLiveRequest.head)
  
  ::ReqHead* temp = head_;
  head_ = NULL;
  return temp;
}
void KeepLiveRequest::set_allocated_head(::ReqHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:KeepLiveRequest.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepLiveResponse::kHeadFieldNumber;
const int KeepLiveResponse::kTimestumpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepLiveResponse::KeepLiveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KeepLiveResponse)
}

void KeepLiveResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::RespHead*>(&::RespHead::default_instance());
}

KeepLiveResponse::KeepLiveResponse(const KeepLiveResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KeepLiveResponse)
}

void KeepLiveResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  head_ = NULL;
  timestump_ = 0u;
}

KeepLiveResponse::~KeepLiveResponse() {
  // @@protoc_insertion_point(destructor:KeepLiveResponse)
  SharedDtor();
}

void KeepLiveResponse::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void KeepLiveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepLiveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepLiveResponse_descriptor_;
}

const KeepLiveResponse& KeepLiveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fcd_2eproto();
  return *default_instance_;
}

KeepLiveResponse* KeepLiveResponse::default_instance_ = NULL;

KeepLiveResponse* KeepLiveResponse::New(::google::protobuf::Arena* arena) const {
  KeepLiveResponse* n = new KeepLiveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepLiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:KeepLiveResponse)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  timestump_ = 0u;
}

bool KeepLiveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KeepLiveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RespHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestump;
        break;
      }

      // optional uint32 timestump = 2;
      case 2: {
        if (tag == 16) {
         parse_timestump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestump_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KeepLiveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KeepLiveResponse)
  return false;
#undef DO_
}

void KeepLiveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KeepLiveResponse)
  // optional .RespHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional uint32 timestump = 2;
  if (this->timestump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestump(), output);
  }

  // @@protoc_insertion_point(serialize_end:KeepLiveResponse)
}

::google::protobuf::uint8* KeepLiveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeepLiveResponse)
  // optional .RespHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // optional uint32 timestump = 2;
  if (this->timestump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestump(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KeepLiveResponse)
  return target;
}

int KeepLiveResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KeepLiveResponse)
  int total_size = 0;

  // optional .RespHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional uint32 timestump = 2;
  if (this->timestump() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestump());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepLiveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KeepLiveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeepLiveResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepLiveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KeepLiveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KeepLiveResponse)
    MergeFrom(*source);
  }
}

void KeepLiveResponse::MergeFrom(const KeepLiveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KeepLiveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_head()) {
    mutable_head()->::RespHead::MergeFrom(from.head());
  }
  if (from.timestump() != 0) {
    set_timestump(from.timestump());
  }
}

void KeepLiveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KeepLiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepLiveResponse::CopyFrom(const KeepLiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeepLiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepLiveResponse::IsInitialized() const {

  return true;
}

void KeepLiveResponse::Swap(KeepLiveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepLiveResponse::InternalSwap(KeepLiveResponse* other) {
  std::swap(head_, other->head_);
  std::swap(timestump_, other->timestump_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepLiveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepLiveResponse_descriptor_;
  metadata.reflection = KeepLiveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepLiveResponse

// optional .RespHead head = 1;
bool KeepLiveResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void KeepLiveResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::RespHead& KeepLiveResponse::head() const {
  // @@protoc_insertion_point(field_get:KeepLiveResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::RespHead* KeepLiveResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::RespHead;
  }
  // @@protoc_insertion_point(field_mutable:KeepLiveResponse.head)
  return head_;
}
::RespHead* KeepLiveResponse::release_head() {
  // @@protoc_insertion_point(field_release:KeepLiveResponse.head)
  
  ::RespHead* temp = head_;
  head_ = NULL;
  return temp;
}
void KeepLiveResponse::set_allocated_head(::RespHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:KeepLiveResponse.head)
}

// optional uint32 timestump = 2;
void KeepLiveResponse::clear_timestump() {
  timestump_ = 0u;
}
 ::google::protobuf::uint32 KeepLiveResponse::timestump() const {
  // @@protoc_insertion_point(field_get:KeepLiveResponse.timestump)
  return timestump_;
}
 void KeepLiveResponse::set_timestump(::google::protobuf::uint32 value) {
  
  timestump_ = value;
  // @@protoc_insertion_point(field_set:KeepLiveResponse.timestump)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
