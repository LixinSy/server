// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ReqHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespHead_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fdef_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_5fdef_2eproto() {
  protobuf_AddDesc_msg_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_def.proto");
  GOOGLE_CHECK(file != NULL);
  ReqHead_descriptor_ = file->message_type(0);
  static const int ReqHead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHead, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHead, msg_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHead, src_),
  };
  ReqHead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqHead_descriptor_,
      ReqHead::default_instance_,
      ReqHead_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqHead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHead, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHead, _is_default_instance_));
  RespHead_descriptor_ = file->message_type(1);
  static const int RespHead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespHead, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespHead, msg_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespHead, result_),
  };
  RespHead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RespHead_descriptor_,
      RespHead::default_instance_,
      RespHead_offsets_,
      -1,
      -1,
      -1,
      sizeof(RespHead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespHead, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespHead, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqHead_descriptor_, &ReqHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RespHead_descriptor_, &RespHead::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fdef_2eproto() {
  delete ReqHead::default_instance_;
  delete ReqHead_reflection_;
  delete RespHead::default_instance_;
  delete RespHead_reflection_;
}

void protobuf_AddDesc_msg_5fdef_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsg_def.proto\"7\n\007ReqHead\022\016\n\006msg_id\030\001 \001"
    "(\r\022\017\n\007msg_seq\030\002 \001(\r\022\013\n\003src\030\003 \001(\r\";\n\010Resp"
    "Head\022\016\n\006msg_id\030\001 \001(\r\022\017\n\007msg_seq\030\002 \001(\r\022\016\n"
    "\006result\030\003 \001(\005b\006proto3", 141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_def.proto", &protobuf_RegisterTypes);
  ReqHead::default_instance_ = new ReqHead();
  RespHead::default_instance_ = new RespHead();
  ReqHead::default_instance_->InitAsDefaultInstance();
  RespHead::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fdef_2eproto {
  StaticDescriptorInitializer_msg_5fdef_2eproto() {
    protobuf_AddDesc_msg_5fdef_2eproto();
  }
} static_descriptor_initializer_msg_5fdef_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHead::kMsgIdFieldNumber;
const int ReqHead::kMsgSeqFieldNumber;
const int ReqHead::kSrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHead::ReqHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReqHead)
}

void ReqHead::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReqHead::ReqHead(const ReqHead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReqHead)
}

void ReqHead::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  msg_id_ = 0u;
  msg_seq_ = 0u;
  src_ = 0u;
}

ReqHead::~ReqHead() {
  // @@protoc_insertion_point(destructor:ReqHead)
  SharedDtor();
}

void ReqHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHead_descriptor_;
}

const ReqHead& ReqHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdef_2eproto();
  return *default_instance_;
}

ReqHead* ReqHead::default_instance_ = NULL;

ReqHead* ReqHead::New(::google::protobuf::Arena* arena) const {
  ReqHead* n = new ReqHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHead::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqHead)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqHead, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqHead*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msg_id_, src_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReqHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_seq;
        break;
      }

      // optional uint32 msg_seq = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_src;
        break;
      }

      // optional uint32 src = 3;
      case 3: {
        if (tag == 24) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReqHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReqHead)
  return false;
#undef DO_
}

void ReqHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReqHead)
  // optional uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // optional uint32 msg_seq = 2;
  if (this->msg_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_seq(), output);
  }

  // optional uint32 src = 3;
  if (this->src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->src(), output);
  }

  // @@protoc_insertion_point(serialize_end:ReqHead)
}

::google::protobuf::uint8* ReqHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqHead)
  // optional uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // optional uint32 msg_seq = 2;
  if (this->msg_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_seq(), target);
  }

  // optional uint32 src = 3;
  if (this->src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->src(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ReqHead)
  return target;
}

int ReqHead::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ReqHead)
  int total_size = 0;

  // optional uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // optional uint32 msg_seq = 2;
  if (this->msg_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_seq());
  }

  // optional uint32 src = 3;
  if (this->src() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->src());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReqHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqHead* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReqHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReqHead)
    MergeFrom(*source);
  }
}

void ReqHead::MergeFrom(const ReqHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.msg_seq() != 0) {
    set_msg_seq(from.msg_seq());
  }
  if (from.src() != 0) {
    set_src(from.src());
  }
}

void ReqHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReqHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHead::CopyFrom(const ReqHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHead::IsInitialized() const {

  return true;
}

void ReqHead::Swap(ReqHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHead::InternalSwap(ReqHead* other) {
  std::swap(msg_id_, other->msg_id_);
  std::swap(msg_seq_, other->msg_seq_);
  std::swap(src_, other->src_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHead_descriptor_;
  metadata.reflection = ReqHead_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqHead

// optional uint32 msg_id = 1;
void ReqHead::clear_msg_id() {
  msg_id_ = 0u;
}
 ::google::protobuf::uint32 ReqHead::msg_id() const {
  // @@protoc_insertion_point(field_get:ReqHead.msg_id)
  return msg_id_;
}
 void ReqHead::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:ReqHead.msg_id)
}

// optional uint32 msg_seq = 2;
void ReqHead::clear_msg_seq() {
  msg_seq_ = 0u;
}
 ::google::protobuf::uint32 ReqHead::msg_seq() const {
  // @@protoc_insertion_point(field_get:ReqHead.msg_seq)
  return msg_seq_;
}
 void ReqHead::set_msg_seq(::google::protobuf::uint32 value) {
  
  msg_seq_ = value;
  // @@protoc_insertion_point(field_set:ReqHead.msg_seq)
}

// optional uint32 src = 3;
void ReqHead::clear_src() {
  src_ = 0u;
}
 ::google::protobuf::uint32 ReqHead::src() const {
  // @@protoc_insertion_point(field_get:ReqHead.src)
  return src_;
}
 void ReqHead::set_src(::google::protobuf::uint32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:ReqHead.src)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespHead::kMsgIdFieldNumber;
const int RespHead::kMsgSeqFieldNumber;
const int RespHead::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespHead::RespHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RespHead)
}

void RespHead::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RespHead::RespHead(const RespHead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RespHead)
}

void RespHead::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  msg_id_ = 0u;
  msg_seq_ = 0u;
  result_ = 0;
}

RespHead::~RespHead() {
  // @@protoc_insertion_point(destructor:RespHead)
  SharedDtor();
}

void RespHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RespHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespHead_descriptor_;
}

const RespHead& RespHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdef_2eproto();
  return *default_instance_;
}

RespHead* RespHead::default_instance_ = NULL;

RespHead* RespHead::New(::google::protobuf::Arena* arena) const {
  RespHead* n = new RespHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RespHead::Clear() {
// @@protoc_insertion_point(message_clear_start:RespHead)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RespHead, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RespHead*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msg_id_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool RespHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RespHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_seq;
        break;
      }

      // optional uint32 msg_seq = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RespHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RespHead)
  return false;
#undef DO_
}

void RespHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RespHead)
  // optional uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // optional uint32 msg_seq = 2;
  if (this->msg_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_seq(), output);
  }

  // optional int32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:RespHead)
}

::google::protobuf::uint8* RespHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RespHead)
  // optional uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // optional uint32 msg_seq = 2;
  if (this->msg_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_seq(), target);
  }

  // optional int32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RespHead)
  return target;
}

int RespHead::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RespHead)
  int total_size = 0;

  // optional uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // optional uint32 msg_seq = 2;
  if (this->msg_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_seq());
  }

  // optional int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RespHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RespHead* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RespHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RespHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RespHead)
    MergeFrom(*source);
  }
}

void RespHead::MergeFrom(const RespHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RespHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.msg_seq() != 0) {
    set_msg_seq(from.msg_seq());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RespHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RespHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespHead::CopyFrom(const RespHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RespHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespHead::IsInitialized() const {

  return true;
}

void RespHead::Swap(RespHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespHead::InternalSwap(RespHead* other) {
  std::swap(msg_id_, other->msg_id_);
  std::swap(msg_seq_, other->msg_seq_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespHead_descriptor_;
  metadata.reflection = RespHead_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RespHead

// optional uint32 msg_id = 1;
void RespHead::clear_msg_id() {
  msg_id_ = 0u;
}
 ::google::protobuf::uint32 RespHead::msg_id() const {
  // @@protoc_insertion_point(field_get:RespHead.msg_id)
  return msg_id_;
}
 void RespHead::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:RespHead.msg_id)
}

// optional uint32 msg_seq = 2;
void RespHead::clear_msg_seq() {
  msg_seq_ = 0u;
}
 ::google::protobuf::uint32 RespHead::msg_seq() const {
  // @@protoc_insertion_point(field_get:RespHead.msg_seq)
  return msg_seq_;
}
 void RespHead::set_msg_seq(::google::protobuf::uint32 value) {
  
  msg_seq_ = value;
  // @@protoc_insertion_point(field_set:RespHead.msg_seq)
}

// optional int32 result = 3;
void RespHead::clear_result() {
  result_ = 0;
}
 ::google::protobuf::int32 RespHead::result() const {
  // @@protoc_insertion_point(field_get:RespHead.result)
  return result_;
}
 void RespHead::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:RespHead.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
